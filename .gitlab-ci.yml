# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
image: node:12

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
    paths:
        - node_modules/

include:
    - template: Dependency-Scanning.gitlab-ci.yml
    - template: SAST.gitlab-ci.yml

variables:
    DS_DISABLE_DIND: "true"
    SAST_DISABLE_DIND: "true"

retire-js-dependency_scanning:
    cache:
        policy: pull
    before_script:
        - npm --color="always" install @hap-server/authenticate-pam

sast:
    cache:
        key: none
    dependencies: []
    before_script:
        - rm -rf node_modules/ || true
        - rm -rf dist/ || true
        - rm -rf release/ || true
        - rm types/node_modules/@hap-server/types || true

build:
    stage: build
    script:
        - npm --color="always" install
        - npx gulp --color build
        - npx gulp --color build-release
        - npx gulp --color build-api-types build-ui-api-types
        - npx gulp --color build-example-plugins

        - cd release/hap-server
        - PACKAGE_PATH=`npm --color="always" pack`
        - mv $PACKAGE_PATH ../../hap-server-release.tgz

        - cd ../api-types
        - PACKAGE_PATH=`npm --color="always" pack`
        - mv $PACKAGE_PATH ../../hap-server-api-types-release.tgz

        - cd ../ui-api-types
        - PACKAGE_PATH=`npm --color="always" pack`
        - mv $PACKAGE_PATH ../../hap-server-ui-api-types-release.tgz
    artifacts:
        paths:
            - dist
            - release
            - example-plugins/dist
            - hap-server-release.tgz
            - hap-server-api-types-release.tgz
            - hap-server-ui-api-types-release.tgz
    only:
        changes:
            - .gitlab-ci.yml
            - package-lock.json
            - gulpfile.ts
            - .babelrc
            - src/**/*
            - example-plugins/src/**/*
    except:
        variables:
            - $NPM_AUDIT_SCHEDULE_SKIP_BUILD

# test:
#     stage: test
#     image: node:$NODE_VERSION
#     script:
#         - npm --color="always" install
#         - npm run test
#     only:
#         changes:
#             - .gitlab-ci.yml
#             - package-lock.json
#             - src/**/*.js
#             - src/**/*.ts
#             - src/**/*.vue
#             - example-plugins/src/**/*.js
#     except:
#         variables:
#             - $NPM_AUDIT_SCHEDULE_SKIP_BUILD
#     cache:
#         key: node-v$NODE_VERSION
#         paths:
#             - node_modules/
#     parallel:
#         matrix:
#             - NODE_VERSION: [10, 12, 14]

lint:
    stage: test
    script:
        # Run eslint for JS and Vue files separately
        - npx eslint --ext .js --color example-plugins/src ; JS_EXIT_CODE="$?"
        - npx eslint --ext .ts --color src ; TS_EXIT_CODE="$?"
        - npx eslint --ext .vue --color src ; VUE_EXIT_CODE="$?"
        - FORCE_COLOR=1 npx sass-lint -v ; SASS_EXIT_CODE="$?"
        - sh -c "exit `expr $JS_EXIT_CODE + $TS_EXIT_CODE + $VUE_EXIT_CODE + $SASS_EXIT_CODE`"
    only:
        changes:
            - .gitlab-ci.yml
            - package-lock.json
            - .eslintrc.js
            - .sass-lint.yml
            - src/**/*.js
            - src/**/*.ts
            - src/**/*.vue
            - src/**/*.scss
            - example-plugins/src/**/*.js
    except:
        variables:
            - $NPM_AUDIT_SCHEDULE_SKIP_BUILD
    cache:
        paths:
            - node_modules/
        policy: pull

audit:
    stage: test
    script:
        - npm audit --json > npm-audit.json || true
        - npm --color="always" audit
    artifacts:
        paths:
            - npm-audit.json
        when: always
    only:
        changes:
            - .gitlab-ci.yml
            - package-lock.json
    dependencies: []
    cache:
        paths:
            - node_modules/
        policy: pull
    when: always
    allow_failure: true

publish-npm:
    stage: deploy
    script:
        - cd release/hap-server
        - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
        - npm --color="always" publish

        - cd ../api-types
        - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
        - npm --color="always" publish

        - cd ../ui-api-types
        - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
        - npm --color="always" publish
    dependencies:
        - build
    only:
        refs:
            - /^v.*$/
        variables:
            - $NPM_TOKEN
    except:
        - branches
    cache:
        paths:
            - node_modules/
        policy: pull

publish-github:
    stage: deploy
    script:
        - cd release/hap-server
        - echo "//npm.pkg.github.com/:_authToken=${GITHUB_NPM_TOKEN}" > .npmrc
        - npm --color="always" --registry=https://npm.pkg.github.com/ publish

        - cd ../api-types
        - echo "//npm.pkg.github.com/:_authToken=${GITHUB_NPM_TOKEN}" > .npmrc
        - npm --color="always" --registry=https://npm.pkg.github.com/ publish

        - cd ../ui-api-types
        - echo "//npm.pkg.github.com/:_authToken=${GITHUB_NPM_TOKEN}" > .npmrc
        - npm --color="always" --registry=https://npm.pkg.github.com/ publish
    dependencies:
        - build
    only:
        refs:
            - /^v.*$/
        variables:
            - $GITHUB_NPM_TOKEN
    except:
        - branches
    cache:
        paths:
            - node_modules/
        policy: pull

publish-gitlab:
    stage: deploy
    script:
        - cd release/hap-server
        - echo "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" | sed s/^https:// > .npmrc
        - npm --color="always" --registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/ publish

        - cd ../api-types
        - cp ../hap-server/.npmrc .
        - npm --color="always" --registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/ publish

        - cd ../ui-api-types
        - cp ../hap-server/.npmrc .
        - npm --color="always" --registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/ publish
    dependencies:
        - build
    only:
        refs:
            - /^v.*$/
        variables:
            - $GITLAB_NPM_PUBLISH
    except:
        - branches
    cache:
        paths:
            - node_modules/
        policy: pull
